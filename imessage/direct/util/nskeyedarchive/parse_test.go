// beeper-imessage - A Matrix-iMessage puppeting bridge.
// Copyright (C) 2023 Beeper, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

package nskeyedarchive_test

import (
	"encoding/base64"
	"testing"

	"github.com/stretchr/testify/assert"
	"howett.net/plist"

	"github.com/beeper/imessage/imessage/direct"
	"github.com/beeper/imessage/imessage/direct/util/gnuzip"
	"github.com/beeper/imessage/imessage/direct/util/nskeyedarchive"
)

func TestParse(t *testing.T) {
	raw := ``

	body, err := base64.StdEncoding.DecodeString(raw)
	assert.NoError(t, err)
	body, err = gnuzip.MaybeGUnzip(body)
	assert.NoError(t, err)

	var balloonPayload direct.BalloonPayload
	_, err = plist.Unmarshal(body, &balloonPayload)
	assert.NoError(t, err)

	val, err := nskeyedarchive.Parse(balloonPayload.Payload)
	assert.NoError(t, err)
	valAsMap, ok := val.(map[string]any)
	assert.True(t, ok)

	richLinkMetadata, ok := valAsMap["richLinkMetadata"].(map[string]any)
	assert.True(t, ok)

	assert.Equal(t, "https://www.google.com/", richLinkMetadata["URL"].(map[string]any)["NS.relative"])
	assert.Equal(t, "image/x-icon", richLinkMetadata["icon"].(map[string]any)["MIMEType"])
	assert.Equal(t, "Google", richLinkMetadata["title"])
}
